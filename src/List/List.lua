---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/11/2 16:34
---

---@type 链表node
ListNode = {leftPointer,rightPointer,data}

ListNode.__index = ListNode

---@type function New 构造函数
function ListNode:New()
    local result = {}
    setmetatable(result,ListNode)
    result.leftPointer = nil
    result.rightPointer = nil
    result.data = nil
    return result
end

---@type 双向链表
List = {count=0,firstNode=nil,lastNode = nil}

List.__index = List

---@type function New 构造函数
function List:New()
    local result = {}
    setmetatable(result,List)
    result.count = 0
    result.firstNode = nil
    result.lastNode = nil
    return result
end

---@type function AddItemToLeft 最左边添加一个
---@param value 值
---@return node ListNode 返回值
function List:AddItemToLeft(value)
    local node = ListNode:New()
    node.data = value
    node.leftPointer = nil
    node.rightPointer = self.firstNode
    if self.firstNode~=nil then
        self.firstNode.leftPointer = node
    end
    self.count = self.count +1
    if self.count == 1 then
        self.firstNode = node
        self.lastNode = node
    end
    self.firstNode = node
    return node
end

---@type function AddItemToRight 最右边添加一个
---@param value 值
---@return node ListNode 返回值
function List:AddItemToRight(value)
    local node = ListNode:New()
    node.data = value
    node.leftPointer = self.lastNode
    node.rightPointer = nil
    if self.lastNode~=nil then
        self.lastNode.rightPointer = node
    end
    self.count = self.count +1
    if self.count == 1 then
        self.firstNode = node
        self.lastNode = node
    end
    self.lastNode = node
end

---@type function RemoveOneItem 从开头往后遍历，删除第一个遇到的值
---@param value 值
function List:RemoveOneItem(value)
    if self.count == 0 then
        return
    else
        local node = self.firstNode
        while(node ~=nil) do
            if node.data  == value then
                local leftPointer  = node.leftPointer
                local rightPointer = node.rightPointer
                if leftPointer ~= nil then
                    leftPointer.rightPointer = node.rightPointer
                end
                if rightPointer ~= nil then
                    rightPointer.leftPointer = node.leftPointer
                end
                if node == self.firstNode then
                    self.firstNode = node.rightPointer
                end
                if node == self.lastNode then
                    self.lastNode  = node.leftPointer
                end
                node.leftPointer = nil
                node.rightPointer = nil
                break
            else
                node = node.rightPointer
            end
        end
    end
end

---@type function Count 返回个数
---@return self.count Number 返回值
function List:Count()
    return self.count
end

---@type function GetFirstNode 获取第一个数据
function List:GetFirstNode()
    return self.firstNode
end

---@type function GetLastNode 获取最后一个数据
function List:GetLastNode()
    return self.lastNode
end

---@type function ClearList 清空链表
function List:ClearList()
    local temp = self.firstNode
    while(temp~=nil) do
        local nextNode = temp.rightPointer
        temp = nil
        temp = nextNode
    end
    self.count = 0
end


return List